{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "import numpy as np ",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 2
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'ModuleNotFoundError'>",
          "evalue": "No module named 'seaborn'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[46], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m \n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mseaborn\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msns\u001b[39;00m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'seaborn'"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 46
    },
    {
      "cell_type": "code",
      "source": "df= pd.read_csv ('diabetes_unclean.csv')",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 4
    },
    {
      "cell_type": "code",
      "source": "df.head(20)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 6,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     ID  No_Pation Gender   AGE  Urea    Cr  HbA1c  Chol   TG  HDL  LDL  VLDL  \\\n0   502      17975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n1   735      34221      M  26.0   4.5  62.0    4.9   3.7  1.4  1.1  2.1   0.6   \n2   420      47975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n3   680      87656      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n4   504      34223      M  33.0   7.1  46.0    4.9   4.9  1.0  0.8  2.0   0.4   \n5   634      34224      F  45.0   2.3  24.0    4.0   2.9  1.0  1.0  1.5   0.4   \n6   721      34225      F  50.0   2.0  50.0    4.0   3.6  1.3  0.9  2.1   0.6   \n7   421      34227      M  48.0   4.7  47.0    4.0   2.9  0.8  0.9  1.6   0.4   \n8   670      34229      M  43.0   2.6  67.0    4.0   3.8  0.9  2.4  3.7   1.0   \n9   759      34230      F  32.0   3.6  28.0    4.0   3.8  2.0  2.4  3.8   1.0   \n10  636      34231      F  31.0   4.4  55.0    4.2   3.6  0.7  1.7  1.6   0.3   \n11  788      34232      F  33.0   3.3  53.0    4.0   4.0  1.1  0.9  2.7   1.0   \n12   82      46815      F  30.0   3.0  42.0    4.1   4.9  1.3  1.2  3.2   0.5   \n13  132      34234      F  45.0   4.6  54.0    5.1   4.2  1.7  1.2  2.2   0.8   \n14  402      34235      F  50.0   3.5  39.0    4.0   4.0  1.5  1.2  2.2   0.7   \n15  566      34236      M  50.0   5.5  74.0    5.0   3.6  1.1  1.0  2.1   0.5   \n16  596      34237      F  50.0   5.9  53.0    5.4   5.3  0.8  1.1  4.1   0.3   \n17  676      87654      F  30.0   3.0  42.0    4.1   4.9  1.3  1.2  3.2   0.5   \n18  729      34238      F  49.0   2.2  28.0    4.1   5.0  1.3  1.2  3.3   0.6   \n19  742      34239      F  49.0   3.8  55.0    4.0   4.4  0.9  1.0  1.3   0.4   \n\n     BMI CLASS  \n0   24.0     N  \n1   23.0     N  \n2   24.0     N  \n3   24.0     N  \n4   21.0     N  \n5   21.0     N  \n6   24.0     N  \n7   24.0     N  \n8   21.0     N  \n9   24.0     N  \n10  23.0     N  \n11  21.0     N  \n12  22.0     N  \n13  23.0     N  \n14  24.0     N  \n15  21.0     N  \n16  21.0     N  \n17  22.0     N  \n18  24.0     N  \n19  23.0     N  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>No_Pation</th>\n      <th>Gender</th>\n      <th>AGE</th>\n      <th>Urea</th>\n      <th>Cr</th>\n      <th>HbA1c</th>\n      <th>Chol</th>\n      <th>TG</th>\n      <th>HDL</th>\n      <th>LDL</th>\n      <th>VLDL</th>\n      <th>BMI</th>\n      <th>CLASS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>502</td>\n      <td>17975</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>735</td>\n      <td>34221</td>\n      <td>M</td>\n      <td>26.0</td>\n      <td>4.5</td>\n      <td>62.0</td>\n      <td>4.9</td>\n      <td>3.7</td>\n      <td>1.4</td>\n      <td>1.1</td>\n      <td>2.1</td>\n      <td>0.6</td>\n      <td>23.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>420</td>\n      <td>47975</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>680</td>\n      <td>87656</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>504</td>\n      <td>34223</td>\n      <td>M</td>\n      <td>33.0</td>\n      <td>7.1</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.9</td>\n      <td>1.0</td>\n      <td>0.8</td>\n      <td>2.0</td>\n      <td>0.4</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>634</td>\n      <td>34224</td>\n      <td>F</td>\n      <td>45.0</td>\n      <td>2.3</td>\n      <td>24.0</td>\n      <td>4.0</td>\n      <td>2.9</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.5</td>\n      <td>0.4</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>721</td>\n      <td>34225</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>2.0</td>\n      <td>50.0</td>\n      <td>4.0</td>\n      <td>3.6</td>\n      <td>1.3</td>\n      <td>0.9</td>\n      <td>2.1</td>\n      <td>0.6</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>421</td>\n      <td>34227</td>\n      <td>M</td>\n      <td>48.0</td>\n      <td>4.7</td>\n      <td>47.0</td>\n      <td>4.0</td>\n      <td>2.9</td>\n      <td>0.8</td>\n      <td>0.9</td>\n      <td>1.6</td>\n      <td>0.4</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>670</td>\n      <td>34229</td>\n      <td>M</td>\n      <td>43.0</td>\n      <td>2.6</td>\n      <td>67.0</td>\n      <td>4.0</td>\n      <td>3.8</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>3.7</td>\n      <td>1.0</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>759</td>\n      <td>34230</td>\n      <td>F</td>\n      <td>32.0</td>\n      <td>3.6</td>\n      <td>28.0</td>\n      <td>4.0</td>\n      <td>3.8</td>\n      <td>2.0</td>\n      <td>2.4</td>\n      <td>3.8</td>\n      <td>1.0</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>636</td>\n      <td>34231</td>\n      <td>F</td>\n      <td>31.0</td>\n      <td>4.4</td>\n      <td>55.0</td>\n      <td>4.2</td>\n      <td>3.6</td>\n      <td>0.7</td>\n      <td>1.7</td>\n      <td>1.6</td>\n      <td>0.3</td>\n      <td>23.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>788</td>\n      <td>34232</td>\n      <td>F</td>\n      <td>33.0</td>\n      <td>3.3</td>\n      <td>53.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>1.1</td>\n      <td>0.9</td>\n      <td>2.7</td>\n      <td>1.0</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>82</td>\n      <td>46815</td>\n      <td>F</td>\n      <td>30.0</td>\n      <td>3.0</td>\n      <td>42.0</td>\n      <td>4.1</td>\n      <td>4.9</td>\n      <td>1.3</td>\n      <td>1.2</td>\n      <td>3.2</td>\n      <td>0.5</td>\n      <td>22.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>132</td>\n      <td>34234</td>\n      <td>F</td>\n      <td>45.0</td>\n      <td>4.6</td>\n      <td>54.0</td>\n      <td>5.1</td>\n      <td>4.2</td>\n      <td>1.7</td>\n      <td>1.2</td>\n      <td>2.2</td>\n      <td>0.8</td>\n      <td>23.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>402</td>\n      <td>34235</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>3.5</td>\n      <td>39.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>1.5</td>\n      <td>1.2</td>\n      <td>2.2</td>\n      <td>0.7</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>566</td>\n      <td>34236</td>\n      <td>M</td>\n      <td>50.0</td>\n      <td>5.5</td>\n      <td>74.0</td>\n      <td>5.0</td>\n      <td>3.6</td>\n      <td>1.1</td>\n      <td>1.0</td>\n      <td>2.1</td>\n      <td>0.5</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>596</td>\n      <td>34237</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>5.9</td>\n      <td>53.0</td>\n      <td>5.4</td>\n      <td>5.3</td>\n      <td>0.8</td>\n      <td>1.1</td>\n      <td>4.1</td>\n      <td>0.3</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>676</td>\n      <td>87654</td>\n      <td>F</td>\n      <td>30.0</td>\n      <td>3.0</td>\n      <td>42.0</td>\n      <td>4.1</td>\n      <td>4.9</td>\n      <td>1.3</td>\n      <td>1.2</td>\n      <td>3.2</td>\n      <td>0.5</td>\n      <td>22.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>729</td>\n      <td>34238</td>\n      <td>F</td>\n      <td>49.0</td>\n      <td>2.2</td>\n      <td>28.0</td>\n      <td>4.1</td>\n      <td>5.0</td>\n      <td>1.3</td>\n      <td>1.2</td>\n      <td>3.3</td>\n      <td>0.6</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>742</td>\n      <td>34239</td>\n      <td>F</td>\n      <td>49.0</td>\n      <td>3.8</td>\n      <td>55.0</td>\n      <td>4.0</td>\n      <td>4.4</td>\n      <td>0.9</td>\n      <td>1.0</td>\n      <td>1.3</td>\n      <td>0.4</td>\n      <td>23.0</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6
    },
    {
      "cell_type": "code",
      "source": "df.columns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 8,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['ID', 'No_Pation', 'Gender', 'AGE', 'Urea', 'Cr', 'HbA1c', 'Chol', 'TG',\n       'HDL', 'LDL', 'VLDL', 'BMI', 'CLASS'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8
    },
    {
      "cell_type": "code",
      "source": "df.rename(columns={'No_Pation':'Patients_No'}, inplace=True) \ndf.columns           ",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 14,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['ID', 'Patients_No', 'Gender', 'AGE', 'Urea', 'Cr', 'HbA1c', 'Chol',\n       'TG', 'HDL', 'LDL', 'VLDL', 'BMI', 'CLASS'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14
    },
    {
      "cell_type": "code",
      "source": "df.head(10)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 15,
          "output_type": "execute_result",
          "data": {
            "text/plain": "    ID  Patients_No Gender   AGE  Urea    Cr  HbA1c  Chol   TG  HDL  LDL  \\\n0  502        17975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   \n1  735        34221      M  26.0   4.5  62.0    4.9   3.7  1.4  1.1  2.1   \n2  420        47975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   \n3  680        87656      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   \n4  504        34223      M  33.0   7.1  46.0    4.9   4.9  1.0  0.8  2.0   \n5  634        34224      F  45.0   2.3  24.0    4.0   2.9  1.0  1.0  1.5   \n6  721        34225      F  50.0   2.0  50.0    4.0   3.6  1.3  0.9  2.1   \n7  421        34227      M  48.0   4.7  47.0    4.0   2.9  0.8  0.9  1.6   \n8  670        34229      M  43.0   2.6  67.0    4.0   3.8  0.9  2.4  3.7   \n9  759        34230      F  32.0   3.6  28.0    4.0   3.8  2.0  2.4  3.8   \n\n   VLDL   BMI CLASS  \n0   0.5  24.0     N  \n1   0.6  23.0     N  \n2   0.5  24.0     N  \n3   0.5  24.0     N  \n4   0.4  21.0     N  \n5   0.4  21.0     N  \n6   0.6  24.0     N  \n7   0.4  24.0     N  \n8   1.0  21.0     N  \n9   1.0  24.0     N  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Patients_No</th>\n      <th>Gender</th>\n      <th>AGE</th>\n      <th>Urea</th>\n      <th>Cr</th>\n      <th>HbA1c</th>\n      <th>Chol</th>\n      <th>TG</th>\n      <th>HDL</th>\n      <th>LDL</th>\n      <th>VLDL</th>\n      <th>BMI</th>\n      <th>CLASS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>502</td>\n      <td>17975</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>735</td>\n      <td>34221</td>\n      <td>M</td>\n      <td>26.0</td>\n      <td>4.5</td>\n      <td>62.0</td>\n      <td>4.9</td>\n      <td>3.7</td>\n      <td>1.4</td>\n      <td>1.1</td>\n      <td>2.1</td>\n      <td>0.6</td>\n      <td>23.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>420</td>\n      <td>47975</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>680</td>\n      <td>87656</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>4.7</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.2</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>1.4</td>\n      <td>0.5</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>504</td>\n      <td>34223</td>\n      <td>M</td>\n      <td>33.0</td>\n      <td>7.1</td>\n      <td>46.0</td>\n      <td>4.9</td>\n      <td>4.9</td>\n      <td>1.0</td>\n      <td>0.8</td>\n      <td>2.0</td>\n      <td>0.4</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>634</td>\n      <td>34224</td>\n      <td>F</td>\n      <td>45.0</td>\n      <td>2.3</td>\n      <td>24.0</td>\n      <td>4.0</td>\n      <td>2.9</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.5</td>\n      <td>0.4</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>721</td>\n      <td>34225</td>\n      <td>F</td>\n      <td>50.0</td>\n      <td>2.0</td>\n      <td>50.0</td>\n      <td>4.0</td>\n      <td>3.6</td>\n      <td>1.3</td>\n      <td>0.9</td>\n      <td>2.1</td>\n      <td>0.6</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>421</td>\n      <td>34227</td>\n      <td>M</td>\n      <td>48.0</td>\n      <td>4.7</td>\n      <td>47.0</td>\n      <td>4.0</td>\n      <td>2.9</td>\n      <td>0.8</td>\n      <td>0.9</td>\n      <td>1.6</td>\n      <td>0.4</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>670</td>\n      <td>34229</td>\n      <td>M</td>\n      <td>43.0</td>\n      <td>2.6</td>\n      <td>67.0</td>\n      <td>4.0</td>\n      <td>3.8</td>\n      <td>0.9</td>\n      <td>2.4</td>\n      <td>3.7</td>\n      <td>1.0</td>\n      <td>21.0</td>\n      <td>N</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>759</td>\n      <td>34230</td>\n      <td>F</td>\n      <td>32.0</td>\n      <td>3.6</td>\n      <td>28.0</td>\n      <td>4.0</td>\n      <td>3.8</td>\n      <td>2.0</td>\n      <td>2.4</td>\n      <td>3.8</td>\n      <td>1.0</td>\n      <td>24.0</td>\n      <td>N</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15
    },
    {
      "cell_type": "code",
      "source": "df.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 16,
          "output_type": "execute_result",
          "data": {
            "text/plain": "ID             0\nPatients_No    0\nGender         0\nAGE            1\nUrea           1\nCr             2\nHbA1c          3\nChol           2\nTG             2\nHDL            1\nLDL            2\nVLDL           1\nBMI            0\nCLASS          0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16
    },
    {
      "cell_type": "code",
      "source": "mean_value=  df ['HbA1c'].mean()\nmean_value",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "8.284155069582505"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19
    },
    {
      "cell_type": "code",
      "source": "df ['HbA1c'].fillna(mean_value, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 20
    },
    {
      "cell_type": "code",
      "source": "df.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "ID             0\nPatients_No    0\nGender         0\nAGE            1\nUrea           1\nCr             2\nHbA1c          0\nChol           2\nTG             2\nHDL            1\nLDL            2\nVLDL           1\nBMI            0\nCLASS          0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21
    },
    {
      "cell_type": "code",
      "source": "df1=df.dropna()\ndf1.isnull().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "ID             0\nPatients_No    0\nGender         0\nAGE            0\nUrea           0\nCr             0\nHbA1c          0\nChol           0\nTG             0\nHDL            0\nLDL            0\nVLDL           0\nBMI            0\nCLASS          0\ndtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22
    },
    {
      "cell_type": "code",
      "source": "df1.info()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 997 entries, 0 to 1008\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   ID           997 non-null    int64  \n 1   Patients_No  997 non-null    int64  \n 2   Gender       997 non-null    object \n 3   AGE          997 non-null    float64\n 4   Urea         997 non-null    float64\n 5   Cr           997 non-null    float64\n 6   HbA1c        997 non-null    float64\n 7   Chol         997 non-null    float64\n 8   TG           997 non-null    float64\n 9   HDL          997 non-null    float64\n 10  LDL          997 non-null    float64\n 11  VLDL         997 non-null    float64\n 12  BMI          997 non-null    float64\n 13  CLASS        997 non-null    object \ndtypes: float64(10), int64(2), object(2)\nmemory usage: 109.0+ KB\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 25
    },
    {
      "cell_type": "code",
      "source": "df.rename(columns={'AGE':'Age'}, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 28
    },
    {
      "cell_type": "code",
      "source": "df1.columns",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 29,
          "output_type": "execute_result",
          "data": {
            "text/plain": "Index(['ID', 'Patients_No', 'Gender', 'Age', 'Urea', 'Cr', 'HbA1c', 'Chol',\n       'TG', 'HDL', 'LDL', 'VLDL', 'BMI', 'CLASS'],\n      dtype='object')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 29
    },
    {
      "cell_type": "code",
      "source": "df1.groupby('CLASS')['CLASS'].agg('count')",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 38,
          "output_type": "execute_result",
          "data": {
            "text/plain": "CLASS\nN     102\nN       1\nP      53\nY     832\nY       9\nName: CLASS, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 38
    },
    {
      "cell_type": "code",
      "source": "df1['CLASS'].unique()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 35,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array(['N', 'N ', 'P', 'Y', 'Y '], dtype=object)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 35
    },
    {
      "cell_type": "code",
      "source": "df1['Age'].unique()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 34,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array([50., 26., 33., 45., 48., 43., 32., 31., 30., 49., 42., 39., 41.,\n       44., 47., 36., 38., 46., 35., 40., 59., 51., 57., 63., 25., 60.,\n       77., 54., 34., 55., 28., 56., 52., 69., 73., 61., 58., 53., 66.,\n       68., 62., 64., 67., 70., 79., 76., 75., 65., 71.])"
          },
          "metadata": {}
        }
      ],
      "execution_count": 34
    },
    {
      "cell_type": "code",
      "source": "df1[\"CLASS\"]=df1[\"CLASS\"].str.replace(\"Y \",\"Y\")\n\ndf1[\"CLASS\"]=df1[\"CLASS\"].str.replace(\"N \",\"N\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stderr",
          "text": "<ipython-input-43-e2d974a051d4>:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1[\"CLASS\"]=df1[\"CLASS\"].str.replace(\"Y \",\"Y\")\n<ipython-input-43-e2d974a051d4>:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df1[\"CLASS\"]=df1[\"CLASS\"].str.replace(\"N \",\"N\")\n",
          "output_type": "stream"
        }
      ],
      "execution_count": 43
    },
    {
      "cell_type": "code",
      "source": "df1['CLASS'].unique()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 44,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array(['N', 'P', 'Y'], dtype=object)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 44
    },
    {
      "cell_type": "code",
      "source": "plt.boxplot(df1['Cr'])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 48,
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x5ff0fc8>,\n  <matplotlib.lines.Line2D at 0x6aacc68>],\n 'caps': [<matplotlib.lines.Line2D at 0x61aa040>,\n  <matplotlib.lines.Line2D at 0x62d8348>],\n 'boxes': [<matplotlib.lines.Line2D at 0x6a83ca8>],\n 'medians': [<matplotlib.lines.Line2D at 0x65fdde0>],\n 'fliers': [<matplotlib.lines.Line2D at 0x65ff810>],\n 'means': []}"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 48
    },
    {
      "cell_type": "code",
      "source": "max_cr= df1['Cr'].quantile(0.995)\nmax_cr\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 50,
          "output_type": "execute_result",
          "data": {
            "text/plain": "401.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 50
    },
    {
      "cell_type": "code",
      "source": "df1[df1['Cr']>max_cr]",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 51,
          "output_type": "execute_result",
          "data": {
            "text/plain": "      ID  Patients_No Gender   Age  Urea     Cr  HbA1c  Chol   TG  HDL  LDL  \\\n273    1        34325      M  58.0  20.8  800.0    9.1   6.6  2.9  1.1  4.3   \n283  266        24060      M  58.0  20.8  800.0    9.1   6.6  2.9  1.1  4.3   \n846    1        34325      M  56.0  20.8  800.0    9.0   4.6  2.0  1.2  2.5   \n860   19        51623      M  60.0  20.8  800.0    9.0   2.3  1.1  0.9  0.9   \n\n     VLDL   BMI CLASS  \n273   1.3  33.0     Y  \n283   1.3  33.0     Y  \n846   0.9  35.0     Y  \n860   0.5  33.0     Y  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Patients_No</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Urea</th>\n      <th>Cr</th>\n      <th>HbA1c</th>\n      <th>Chol</th>\n      <th>TG</th>\n      <th>HDL</th>\n      <th>LDL</th>\n      <th>VLDL</th>\n      <th>BMI</th>\n      <th>CLASS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>273</th>\n      <td>1</td>\n      <td>34325</td>\n      <td>M</td>\n      <td>58.0</td>\n      <td>20.8</td>\n      <td>800.0</td>\n      <td>9.1</td>\n      <td>6.6</td>\n      <td>2.9</td>\n      <td>1.1</td>\n      <td>4.3</td>\n      <td>1.3</td>\n      <td>33.0</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>283</th>\n      <td>266</td>\n      <td>24060</td>\n      <td>M</td>\n      <td>58.0</td>\n      <td>20.8</td>\n      <td>800.0</td>\n      <td>9.1</td>\n      <td>6.6</td>\n      <td>2.9</td>\n      <td>1.1</td>\n      <td>4.3</td>\n      <td>1.3</td>\n      <td>33.0</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>846</th>\n      <td>1</td>\n      <td>34325</td>\n      <td>M</td>\n      <td>56.0</td>\n      <td>20.8</td>\n      <td>800.0</td>\n      <td>9.0</td>\n      <td>4.6</td>\n      <td>2.0</td>\n      <td>1.2</td>\n      <td>2.5</td>\n      <td>0.9</td>\n      <td>35.0</td>\n      <td>Y</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>19</td>\n      <td>51623</td>\n      <td>M</td>\n      <td>60.0</td>\n      <td>20.8</td>\n      <td>800.0</td>\n      <td>9.0</td>\n      <td>2.3</td>\n      <td>1.1</td>\n      <td>0.9</td>\n      <td>0.9</td>\n      <td>0.5</td>\n      <td>33.0</td>\n      <td>Y</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 51
    },
    {
      "cell_type": "code",
      "source": "df2=df1[df1['Cr']<max_cr]",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 52
    },
    {
      "cell_type": "code",
      "source": "plt.boxplot(df2['Cr'])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 56,
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x7bfdce0>,\n  <matplotlib.lines.Line2D at 0x7bee158>],\n 'caps': [<matplotlib.lines.Line2D at 0x7c54e58>,\n  <matplotlib.lines.Line2D at 0x7b97598>],\n 'boxes': [<matplotlib.lines.Line2D at 0x7c39d70>],\n 'medians': [<matplotlib.lines.Line2D at 0x7bebf90>],\n 'fliers': [<matplotlib.lines.Line2D at 0x7cb25f8>],\n 'means': []}"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 56
    },
    {
      "cell_type": "code",
      "source": "plt.boxplot(df2['HbA1c'])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 58,
          "output_type": "execute_result",
          "data": {
            "text/plain": "{'whiskers': [<matplotlib.lines.Line2D at 0x7dee028>,\n  <matplotlib.lines.Line2D at 0x7df0278>],\n 'caps': [<matplotlib.lines.Line2D at 0x7df2168>,\n  <matplotlib.lines.Line2D at 0x7df4160>],\n 'boxes': [<matplotlib.lines.Line2D at 0x7cbb950>],\n 'medians': [<matplotlib.lines.Line2D at 0x7df6058>],\n 'fliers': [<matplotlib.lines.Line2D at 0x7df81c0>],\n 'means': []}"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 58
    },
    {
      "cell_type": "code",
      "source": "df2.duplicated()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 59,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0       False\n1       False\n2       False\n3       False\n4       False\n        ...  \n1002     True\n1003     True\n1005    False\n1007    False\n1008     True\nLength: 990, dtype: bool"
          },
          "metadata": {}
        }
      ],
      "execution_count": 59
    },
    {
      "cell_type": "code",
      "source": "df3=df2.drop_duplicates()",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 61
    },
    {
      "cell_type": "code",
      "source": "df3.duplicated().sum()",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "execution_count": 62,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 62
    },
    {
      "cell_type": "code",
      "source": "df3.to_csv('Cleaned_data.csv')",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": 63
    }
  ]
}